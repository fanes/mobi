package com.df.dianping;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Bitmap.Config;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Path;
import android.util.AttributeSet;
import android.view.MotionEvent;
import android.view.View;

public class GuaGuaKa extends View
{

	/**
	 * 绘制线条的Paint,即用户手指绘制Path
	 */
	private Paint mOutterPaint = new Paint();
	/**
	 * 记录用户绘制的Path
	 */
	private Path mPath = new Path();
	/**
	 * 内存中创建的Canvas
	 */
	private Canvas mCanvas;
	/**
	 * mCanvas绘制内容在其上
	 */
	private Bitmap mBitmap;

	private int mLastX;
	private int mLastY;

	public GuaGuaKa(Context context)
	{
		this(context, null);
	}

	public GuaGuaKa(Context context, AttributeSet attrs)
	{
		this(context, attrs, 0);
	}

	public GuaGuaKa(Context context, AttributeSet attrs, int defStyle)
	{
		super(context, attrs, defStyle);
		init();
	}

	private void init()
	{
		mPath = new Path();

	}

	@Override
	protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)
	{
		super.onMeasure(widthMeasureSpec, heightMeasureSpec);  
		  
        int width = getMeasuredWidth();  
        int height = getMeasuredHeight();  
        // 初始化bitmap  
        mBitmap = Bitmap.createBitmap(width, height, Config.ARGB_8888);  
        mCanvas = new Canvas(mBitmap);  
//        setUpOutPaint();  
     // 设置画笔
     	mOutterPaint.setColor(Color.RED);
     	mOutterPaint.setAntiAlias(true);
     	mOutterPaint.setDither(true);
     	mOutterPaint.setStyle(Paint.Style.STROKE);
     	mOutterPaint.setStrokeJoin(Paint.Join.ROUND); // 圆角
     	mOutterPaint.setStrokeCap(Paint.Cap.ROUND); // 圆角
     	// 设置画笔宽度
     	mOutterPaint.setStrokeWidth(20);
        
        //绘制这改成  
        mCanvas.drawColor(Color.parseColor("#c0c0c0"));  
	}
	
	

	@Override
//	protected void onDraw(Canvas canvas)
//	{
//		drawPath();
//		canvas.drawBitmap(mBitmap, 0, 0, null);
//
//	}
	
	protected void onDraw(Canvas canvas)  
	{  
	    canvas.drawBitmap(mBackBitmap, 0, 0, null);  
	    drawPath();  
	    canvas.drawBitmap(mBitmap, 0, 0, null);  
	}

	/**
	 * 绘制线条
	 */
//	private void drawPath()
//	{
//		mCanvas.drawPath(mPath, mOutterPaint);
//	}
	
	private void drawPath()  
	{
		mOutterPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
		mCanvas.drawPath(mPath, mOutterPaint);  
	}
	

	@Override
	public boolean onTouchEvent(MotionEvent event)
	{
		int action = event.getAction();
		int x = (int) event.getX();
		int y = (int) event.getY();
		switch (action)
		{
		case MotionEvent.ACTION_DOWN:
			mLastX = x;
			mLastY = y;
			mPath.moveTo(mLastX, mLastY);
			break;
		case MotionEvent.ACTION_MOVE:

			int dx = Math.abs(x - mLastX);
			int dy = Math.abs(y - mLastY);

			if (dx > 3 || dy > 3)
				mPath.lineTo(x, y);

			mLastX = x;
			mLastY = y;
			break;
		}

		invalidate();
		return true;
	}

}
